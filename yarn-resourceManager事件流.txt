RMNodeImpl流程RMNodeEventType
1.STARTED 对Node节点进行注册,使resourceManager知道有该node存在
状态从NEW变成RUNNING状态
a.判断该node所在host是否在集群管理的不活跃节点集合中
b.a如果存在在不活跃集合中,说明该Node以前注册过,现在又活跃了
  因此从该集合中删除该host映射
c.a如果发现该host没有在不活跃集合中,则循环该node上所有的容器,如果该node的容器是RUNNING,则向全局变量集合中添加正在运行的容器rmNode.launchedContainers.add(container.getContainerId());
d.循环该node节点上所有的正在活跃的app集合
  先判断该appId在resourceManager中存在,如果不存在,则说明也不做,打印一个警告日志
  如果存在,则发送RMAppEventType.APP_RUNNING_ON_NODE事件,说明该app在某个node节点上运行了
e.发送事件SchedulerEventType.NODE_ADDED,让调度器添加一个该节点
f.发送事件NodesListManagerEventType.NODE_USABLE

2.RESOURCE_UPDATE,说明该Node节点的总资源有变化,即给该节点增加了内存了,这个触发的机会比较少
状态从NEW/REBOOTED/DECOMMISSIONED/LOST/UNHEALTHY还是到NEW/REBOOTED/DECOMMISSIONED/LOST/UNHEALTHY状态,即状态不变化
a.直接设置该node的总资源即可rmNode.totalCapability = resourceOption.getResource();
  总资源,即该node为集群提供的资源,包括CPU和内存

3.RESOURCE_UPDATE,说明该Node节点的总资源有变化,即给该节点增加了内存了,这个触发的机会比较少
状态才RUNNING改变成RUNNING状态,说明节点此时是运行的时候更改了节点的资源情况
a.直接设置该node的总资源即可rmNode.totalCapability = resourceOption.getResource();
  总资源,即该node为集群提供的资源,包括CPU和内存
b.发送SchedulerEventType.NODE_RESOURCE_UPDATE事件,调度器收到该事件后,会对整体调度器资源进行相关更改,即先删除,后添加。

4.STATUS_UPDATE,更新该node的状态情况,比如健康情况
状态从RUNNING转换到RUNNING/UNHEALTHY,即如果不健康的话,则状态最后为不健康状态
该事件是Node节点发送心跳给yarn,因此是该类的主要函数,Node节点会提交以下信息:
  private final NodeHealthStatus nodeHealthStatus;//记录上一次该远程节点的健康检查统计信息
  private final List<ContainerStatus> containersCollection;目前正在运行的容器状态
  private final NodeHeartbeatResponse latestResponse;//针对该节点的心跳回复统计信息
  private final List<ApplicationId> keepAliveAppIds;应该被关闭的应用.但是此时还存在,这样的一个集合
a.设置本地变量latestResponse,为上一次回复的内容信息
b.根据node节点的监控检查信息,设置属性检查信息、最后检查时间
c.判断是否node节点健康检查为不健康,如果不健康,则返回UNHEALTHY状态,并且执行以下流程
  清空nodeUpdateQueue队列信息
  发送SchedulerEventType.NODE_REMOVED事件,去通知调度器移除该node节点
  发送NodesListManagerEventType.NODE_UNUSABLE事件
d.如果健康检查是没问题的,还是健康
 循环所有在该node上活着的容器
 如果该容器在resourceManager上已经是在rmNode.containersToClean集合中了,也就是说该容器要去被清理的了,因此不管该容器在node上运行如何了
 如果该容器所在的app在resourceManager上已经完成了,因此不管该容器在node上运行如何了
 如果该容器在node上的状态是ContainerState.RUNNING,并且rmNode.launchedContainers正在运行的容器又不包含该容器,则说明是新增加的运行容器,
   添加到rmNode.launchedContainers中,也添加到newlyLaunchedContainers中 
 如果该容器在node上的状态不是ContainerState.RUNNING,则说明该容器已经完成了,则删除rmNode.launchedContainers.remove(containerId);
   添加到完成集合中completedContainers.add(remoteContainer);
e.将新增加的容器和新完成的容器添加到集合中
  rmNode.nodeUpdateQueue.add(new UpdatedContainerInfo(newlyLaunchedContainers, completedContainers));
f.发送SchedulerEventType.NODE_UPDATE事件,通知调度器,一些节点的容器有变更.即远程节点有新容器被启动或者老容器被完成
g.处理keepAliveAppIds,这部分可以忽略,日后看到安全机制的时候在来详细看。

5.STATUS_UPDATE,更新该node的状态情况,比如健康情况
状态从UNHEALTHY转换到RUNNING/UNHEALTHY
a.设置本地变量latestResponse,为上一次回复的内容信息
b.根据node节点的监控检查信息,设置属性检查信息、最后检查时间
c.判断是否node节点健康检查为健康,如果不健康,则返回UNHEALTHY状态
d.如果是健康,则执行以下流程:
 发送SchedulerEventType.NODE_ADDED事件,让调度器添加该节点
 发送NodesListManagerEventType.NODE_USABLE事件 目的是通知节点已经可以使用了

6.DECOMMISSION,使该节点不可用
状态从RUNNING/UNHEALTHY转换到DECOMMISSIONED
调用DeactivateNodeTransition方法

7.EXPIRE
状态从RUNNING/UNHEALTHY转换到LOST
调用DeactivateNodeTransition方法

6.REBOOTING
状态从RUNNING/UNHEALTHY转换到REBOOTED
调用DeactivateNodeTransition方法

8.CLEANUP_APP 说明一个app已经完成了
状态从RUNNING/UNHEALTHY转换到RUNNING/UNHEALTHY
a.rmNode.finishedApplications.add(((RMNodeCleanAppEvent) event).getAppId());

9.CLEANUP_CONTAINER 说明一个容器完成了,要去清理该容器
状态从RUNNING/UNHEALTHY转换到RUNNING/UNHEALTHY
a.rmNode.containersToClean.add(((RMNodeCleanContainerEvent) event).getContainerId());

10.FINISHED_CONTAINERS_PULLED_BY_AM,表示通过AM 完成了容器,需要被移除
状态从DECOMMISSIONED/UNHEALTHY/LOST/RUNNING转换到DECOMMISSIONED/UNHEALTHY/LOST/RUNNING
a.rmNode.containersToBeRemovedFromNM.addAll(((RMNodeFinishedContainersPulledByAMEvent) event).getContainers());

11.RECONNECTED node节点重新连接resourceManager
状态从RUNNING/UNHEALTHY转换到RUNNING/UNHEALTHY
可忽略实现

12.updateNodeHeartbeatResponseForCleanup(NodeHeartbeatResponse response)
向response中添加信息,发送给node节点
添加的信息包括
      response.addAllContainersToCleanup(new ArrayList<ContainerId>(this.containersToClean));要去清理的容器
      response.addAllApplicationsToCleanup(this.finishedApplications);已经完成的应用
      response.addContainersToBeRemovedFromNM(new ArrayList<ContainerId>(this.containersToBeRemovedFromNM));
清空本地信息
      this.containersToClean.clear();
      this.finishedApplications.clear();
      this.containersToBeRemovedFromNM.clear();

13.List<UpdatedContainerInfo> pullContainerUpdates()
获取所有的远程节点刚刚新启动的容器以及完成的容器
    while(nodeUpdateQueue.peek() != null){
      latestContainerInfoList.add(nodeUpdateQueue.poll());
    }
    this.nextHeartBeat = true;


DeactivateNodeTransition方法  
a.清空rmNode.nodeUpdateQueue.clear();
b.如果目前该节点的状态不是NodeState.UNHEALTHY,说明该节点还没有被调度器移除,
  因此发送SchedulerEventType.NODE_REMOVED事件,通知调度器移除该节点
c.发送NodesListManagerEventType.NODE_UNUSABLE事件
d.从集群的节点集合中,将该节点删除
e.该节点虽然删除了,但是为了体现在该节点曾经被使用过,因此将其添加到上下文不活跃节点集合中,rmNode.context.getInactiveRMNodes().put(rmNode.nodeId.getHost(), rmNode);

-------------------------------
RMAppImpl流程RMAppEventType
1.NODE_UPDATE 一个Node节点更新,由NODE_USABLE和NODE_UNUSABLE之间产生了替换 
状态从NEW/RUNNING/NEW_SAVING/SUBMITTED/ACCEPTED变成NEW/RUNNING/NEW_SAVING/SUBMITTED/ACCEPTED状态
a.updatedNodes.add(node); 将变更的node存储到集合中

2.START 开启一个app
状态从NEW变成NEW_SAVING状态
a.保存appId日志,说明该app已经提交到RM中了,用于日后恢复数据使用
app.rmContext.getStateStore().storeNewApplication(app);

3.APP_NEW_SAVED 一个app提交到调度器中
状态从NEW_SAVING变成SUBMITTED状态
a.发送SchedulerEventType.APP_ADDED事件到调度器中。即使调度器去启动该app

4.APP_ACCEPTED 表示调度器开始接受了该app
状态从SUBMITTED变成ACCEPTED状态
a.createNewAttempt;创建一个app尝试任务RMAppAttemptImpl
b.将尝试任务的ID:maxAppAttempts,累加1
c.将尝试任务添加到内存映射中 attempts.put(appAttemptId, attempt);
d.设置当前尝试任务为本次创建的尝试任务currentAttempt = attempt;
e.发送事件RMAppAttemptEventType.START,使尝试任务开始运行

5.ATTEMPT_REGISTERED 表示尝试任务已经开始运行了,因此该app状态变成运行中状态
状态从ACCEPTED变成RUNNING状态

6.APP_RUNNING_ON_NODE 通知该app在某个节点上运行了容器
状态从ACCEPTED/RUNNING/FINISHING/FINISHED/FINAL_SAVING/FAILED/KILLING/KILLED变成ACCEPTED/RUNNING/FINISHING/FINISHED/FINAL_SAVING/FAILED/KILLING/KILLED状态
a.判断该app在yarn上的状态是否完成了,FAILED/KILLED/FINISHED表示该app已经完成了
b.如果该app已经完成了,则发送事件RMNodeEventType.CLEANUP_APP,使该app所在节点去进行资源清理,该节点不在需要运行该app的资源了
c.如果该app没有完成,则app.ranNodes.add(nodeAddedEvent.getNodeId());
  设置该app运行在哪些node节点上,即哪些node节点上运行属于该app的容器

7.MOVE 更改该app所在的队列,当一个队列很繁忙的时候,可以通过命令更改他的队列.使其快速运行起来
状态从SUBMITTED/RUNNING/ACCEPTED/NEW_SAVING变成SUBMITTED/RUNNING/ACCEPTED/NEW_SAVING状态
a.app.queue = app.scheduler.moveApplication(app.applicationId,moveEvent.getTargetQueue());
  通过调度器,去做队列转换,并且将更改后的队列存储在app内部中
b.如果更改过程中出现异常,则存储该异常信息
   moveEvent.getResult().setException(ex);         

8.APP_REJECTED app被拒绝了
状态从NEW/NEW_SAVING/SUBMITTED变成FINAL_SAVING状态
new FinalSavingTransition(new AppRejectedTransition(),RMAppState.FAILED))
  
9.KILL 杀死这个app,而不是某一个尝试任务
状态从NEW变成KILLED状态
a.执行AppKilledTransition逻辑即可,因为任务还没有被真正启动.因此可以直接被杀死

10.KILL 杀死这个app,而不是某一个尝试任务
状态从NEW_SAVING/SUBMITTED/KILLING变成KILLED状态
new FinalSavingTransition(new AppKilledTransition(), RMAppState.KILLED))
因为app已经启动了,因此多了一个记录日志的过程

11.KILL 杀死这个app,而不是某一个尝试任务
状态从ACCEPTED/RUNNING变成KILLING状态
a.app.stateBeforeKilling = app.getState(); 记录kill过程前的状态
b.发送事件RMAppAttemptEventType.KILL,即对当前的尝试任务发送kill命令


12.ATTEMPT_FINISHED 尝试去完成该app,而不是某一个尝试任务
状态从RUNNING/FINISHING/KILLING变成FINISHED状态
调用AppFinishedTransition方法

13.APP_UPDATE_SAVED 彻底将app完成
状态从FINAL_SAVING变成KILLED/FAILED/FINISHING/FINISHED状态
a.调用transitionTodo.transition(app,app.eventCausingFinalSaving)
b.返回return app.targetedFinalState;

14.ATTEMPT_UNREGISTERED 卸载一个尝试任务
状态从RUNNING/KILLING变成FINAL_SAVING状态
new FinalSavingTransition(new AttemptUnregisteredTransition(),RMAppState.FINISHING, RMAppState.FINISHED))

          
1.FinalTransition 设置最终状态,是最后的一步骤
a.for (NodeId nodeId : app.getRanNodes())
 循环该app运行的每一个节点,对每一个节点发送事件RMNodeEventType.CLEANUP_APP,使其去该节点清理该app的资源
b.设置app的完成事件
c.如果recoveredFinalState==null,则发送事件SchedulerEventType.APP_REMOVED,从调度器中移除该app的调度
d.发送RMAppManagerEventType.APP_COMPLETED事件,通知APP的管理者,该app已经完成
e.写入app的历史记录,将最终状态也写入日志中app.rmContext.getRMApplicationHistoryWriter().applicationFinished(app, finalState);
f.app.rmContext.getSystemMetricsPublisher().appFinished(app, finalState, app.finishTime);

2.AppRejectedTransition 拒绝该app
a.调用FinalTransition构造函数,定义最终状态是RMAppState.FAILED
b.设置message信息,app.diagnostics.append(rejectedEvent.getMessage());
c.调用FinalTransition逻辑,完成一个app

3.AppKilledTransition 杀死该app,彻底杀死,而不是杀死某一个尝试任务
a.调用FinalTransition构造函数,定义最终状态是RMAppState.KILLED
b.设置message信息,app.diagnostics.append(rejectedEvent.getMessage());
c.调用FinalTransition逻辑,完成一个app

4.AppFinishedTransition 完成一个app,而不是完成某一个尝试任务
a.调用FinalTransition构造函数,定义最终状态是RMAppState.FINISHED
b.设置message信息,app.diagnostics.append(rejectedEvent.getMessage());
c.调用FinalTransition逻辑,完成一个app

5.FinalSavingTransition 他是一个包装器,用于在具体执行逻辑前,相当于拦截器,可以做其他的一些事儿,比如做记录日志,方便日后还原系统,
  因此该方法执行后,基本上状态都是FINAL_SAVING状态

a.构造函数
  private RMAppState stateBeforeFinalSaving;//保持变更前app的状态
  private RMAppEvent eventCausingFinalSaving;//保存产生的事件
  private RMAppState targetedFinalState;//最终的状态
  Object transitionTodo;//后需要处理的任务
  private long storedFinishTime = 0;//FinalSaving过程中的时间
b.当遇见APP_REJECTED、ATTEMPT_FINISHED、ATTEMPT_FAILED、ATTEMPT_KILLED时候,获取message信息
c.产生当时状态信息,记录到日志中
ApplicationState appState =
        new ApplicationState(this.submitTime, this.startTime,
          this.submissionContext, this.user, stateBeforeFinalSaving, message,
          this.storedFinishTime);
d.发送事件RMStateStoreEventType.UPDATE_APP,去记录到日志中
  this.rmContext.getStateStore().updateApplicationState(appState);

e.记录完日志后,记录日志系统会调用RMAppEventType.APP_UPDATE_SAVED事件

----------------------------
RMAppAttemptImpl流程RMAppAttemptEventType
1.START 开启一个app尝试任务 
状态从NEW变成SUBMITTED状态,表示已经提交给队列了
a.appAttempt.startTime = System.currentTimeMillis();设置尝试任务的开始时间
b.appAttempt.masterService.registerAppAttempt(appAttempt.applicationAttemptId);向AM服务注册,即告诉AM服务,有了一个这样的尝试任务
c.appAttempt.clientTokenMasterKey = appAttempt.rmContext.getClientToAMTokenSecretManager().createMasterKey创建token
d.发送事件SchedulerEventType.APP_ATTEMPT_ADDED,表示创建一个app的尝试任务,提交到队列中来了

2.ATTEMPT_ADDED 当调度器接受了该尝试任务后产生该事件,并且向调度器提交一个容器,该容器是AM所在的容器
状态从SUBMITTED变成LAUNCHED_UNMANAGED_SAVING/SCHEDULED状态,表示队列已经接受了该尝试任务
a.subCtx.getUnmanagedAM()是fasle表示AM由任意一个node去执行
b.重新设置AM所需要的容器资源,即设置容器数量为1,容器优先级是AM的优先级、容器所需要的资源在什么节点上去运行,设置为*
c.去队列中申请AM的资源,即为该尝试任务ID申请一个容器,所需要资源是amReq,释放容器是空集合,没有黑名单因此是null
   Allocation amContainerAllocation =
            appAttempt.scheduler.allocate(appAttempt.applicationAttemptId,Collections.singletonList(appAttempt.amReq),new ArrayList, null, null);
d.返回SCHEDULED状态
e.如果subCtx.getUnmanagedAM()是true,则返回LAUNCHED_UNMANAGED_SAVING,表示在job提交的节点上运行AM

3.CONTAINER_ALLOCATED 表示一个容器被分配到了
状态从SUBMITTED变成ALLOCATED_SAVING/SCHEDULED状态,表示队列已经接受了该尝试任务
a.Allocation amContainerAllocation = appAttempt.scheduler.allocate(appAttempt.applicationAttemptId,new List, new List, null,null);
  这里必须有至少一个容器被分配了,因为一个CONTAINER_ALLOCATED事件被发射,是RM容器被构造后产生的,所以一定有至少一个容器.
  注意,yarn调度器的allocate方法,不保证一定能抓取到资源,可能有很多原因导致抓取不到资源.
  例如DNS不可用原因,容器token不能产生,因此我们要返回以前的状态,即SCHEDULED状态,保持重新尝试,直到am容器被抓取到
b.如果调度器没有为AM分配到容器
  单独启动一个线程,定期发送RMAppAttemptEventType.CONTAINER_ALLOCATED事件,向队列申请容器资源
  返回RMAppAttemptState.SCHEDULED;状态
c.如果分配到了容器 
  appAttempt.setMasterContainer(amContainerAllocation.getContainers().get(0));设置第一个容器为AM容器
  RMContainerImpl rmMasterContainer = (RMContainerImpl)appAttempt.scheduler.getRMContainer(appAttempt.getMasterContainer().getId());
  通过调度器获取到该AM容器的实例
  rmMasterContainer.setAMContainer(true);//设置该容器是AM容器
  appAttempt.getSubmissionContext().setResource(appAttempt.getMasterContainer().getResource());
  返回RMAppAttemptState.ALLOCATED_SAVING状态
          

4.ATTEMPT_NEW_SAVED AM信息已经保存完成
状态从ALLOCATED_SAVING变成ALLOCATED状态,表示AM信息已经保存完成
a.发送AMLauncherEventType.LAUNCH事件,启动该AM容器

5.LAUNCHED AM已经启动了
状态从ALLOCATED变成LAUNCHED状态
a.rmContext.getAMLivelinessMonitor().register(getAppAttemptId()); 注册去监控AM
b.注册token信息

6.REGISTERED 表示AM完全注册到RM了
状态从LAUNCHED变成RUNNING状态
a.设置AM所对应的host、rpc端口、原始url、代理url
b.向app发送事件RMAppEventType.ATTEMPT_REGISTERED,表示该尝试任务的一个AM已经在某个节点上产生了
c.记录历史信息
  appAttempt.rmContext.getRMApplicationHistoryWriter().applicationAttemptStarted(appAttempt);

7.ATTEMPT_UPDATE_SAVED FINAL_SAVING状态最终到其他状态的过程,是最后一步
状态从FINAL_SAVING转换到FINISHING/FINISHED/FAILED/KILLED
a.执行transitionTodo的transition方法,参数appAttempt, causeEvent
b.返回appAttempt.targetedFinalState状态

8.KILL  杀死该尝试任务
状态从NEW/SUBMITTED/ALLOCATED_SAVING/SCHEDULED/LAUNCHED_UNMANAGED_SAVING转换到FINAL_SAVING
new FinalSavingTransition(new BaseFinalTransition(RMAppAttemptState.KILLED), RMAppAttemptState.KILLED))

9.KILL  杀死该尝试任务
状态从ALLOCATED转换到FINAL_SAVING
new FinalSavingTransition(new KillAllocatedAMTransition(), RMAppAttemptState.KILLED))
a.BaseFinalTransition
b.发送事件AMLauncherEventType.CLEANUP,删除该AM的进程

10.KILL  杀死该尝试任务
状态从LAUNCHED/RUNNING转换到FINAL_SAVING
new FinalSavingTransition(new FinalTransition(RMAppAttemptState.KILLED), RMAppAttemptState.KILLED))
a.appAttempt.progress = 1.0f; 设置百分比
b.BaseFinalTransition
c.appAttempt.rmContext.getAMLivelinessMonitor().unregister(appAttempt.getAppAttemptId()); 取消对该尝试任务的监控
d.appAttempt.rmContext.getAMFinishingMonitor().unregister(appAttempt.getAppAttemptId());取消监控
e.发送事件AMLauncherEventType.CLEANUP,删除该AM的进程

11.CONTAINER_FINISHED 容器完成 因为此时的状态来看,AM还没运行起来,因此该完成的容器就是AM容器
状态从SCHEDULED/ALLOCATED_SAVING/ALLOCATED转换到FINAL_SAVING
new FinalSavingTransition(new AMContainerCrashedBeforeRunningTransition(),RMAppAttemptState.FAILED))
a.appAttempt.rmContext.getAMLivelinessMonitor().unregister(appAttempt.getAppAttemptId());
b.appAttempt.setAMContainerCrashedDiagnosticsAndExitStatus(finishEvent);
c.BaseFinalTransition

12.CONTAINER_FINISHED AM容器完成  因为此时的状态来看,AM还没运行起来,因此该完成的容器就是AM容器
状态从LAUNCHED转换到LAUNCHED/FINAL_SAVING
new ContainerFinishedTransition(new AMContainerCrashedBeforeRunningTransition(),RMAppAttemptState.LAUNCHED))
a.appAttempt.rmContext.getAMLivelinessMonitor().unregister(appAttempt.getAppAttemptId());
b.appAttempt.setAMContainerCrashedDiagnosticsAndExitStatus(finishEvent);
c.BaseFinalTransition

13.CONTAINER_FINISHED 一个容器完成
状态从FINISHED/KILLED/FAILED转换到FINISHED/KILLED/FAILED
new ContainerFinishedAtFinalStateTransition())
a.获取该容器在哪个节点完成的,以及完成时候容器的状态。
  将两者添加到全局变量justFinishedContainers中
//该尝试任务的所有容器,在哪些节点上完成的,key是节点ID,value是该节点上完成的容器状态集合
  private ConcurrentMap<NodeId, List<ContainerStatus>> justFinishedContainers = new ConcurrentHashMap<NodeId, List<ContainerStatus>>();

14.CONTAINER_FINISHED 一个容器完成
状态从FINISHING转换到FINISHING/FINISHED
new AMFinishingContainerFinishedTransition()


  private static final class AMFinishingContainerFinishedTransition
      implements
      MultipleArcTransition<RMAppAttemptImpl, RMAppAttemptEvent, RMAppAttemptState> {

    @Override
    public RMAppAttemptState transition(RMAppAttemptImpl appAttempt,
        RMAppAttemptEvent event) {

      RMAppAttemptContainerFinishedEvent containerFinishedEvent
        = (RMAppAttemptContainerFinishedEvent) event;
      ContainerStatus containerStatus =
          containerFinishedEvent.getContainerStatus();

      // Is this container the ApplicationMaster container?
      if (appAttempt.masterContainer.getId().equals(
          containerStatus.getContainerId())) {
        new FinalTransition(RMAppAttemptState.FINISHED).transition(
            appAttempt, containerFinishedEvent);
        appAttempt.sendAMContainerToNM(appAttempt, containerFinishedEvent);
        return RMAppAttemptState.FINISHED;
      }
      // Add all finished containers so that they can be acked to NM.
      addJustFinishedContainer(appAttempt, containerFinishedEvent);

      return RMAppAttemptState.FINISHING;
    }
  }

      .addTransition(
          RMAppAttemptState.RUNNING,
          EnumSet.of(RMAppAttemptState.RUNNING, RMAppAttemptState.FINAL_SAVING),
          RMAppAttemptEventType.CONTAINER_FINISHED,
          new ContainerFinishedTransition(new AMContainerCrashedAtRunningTransition(),RMAppAttemptState.RUNNING))
  
      .addTransition(RMAppAttemptState.FINAL_SAVING, RMAppAttemptState.FINAL_SAVING,
          RMAppAttemptEventType.CONTAINER_FINISHED,
          new ContainerFinishedAtFinalSavingTransition())

1.FinalSavingTransition
中间结果记录到日志中,状态改成FINAL_SAVING

2.BaseFinalTransition 最终一步处理
a.appAttempt.masterService.unregisterAttempt(appAttemptId); 向AM服务取消该AM
b.根据尝试任务的最终状态不同,创建不同的事件,通知对应的app
 如果最终状态是FINISHED,发送RMAppEventType.ATTEMPT_FINISHED事件
 如果最终状态是KILLED,发送RMAppEventType.ATTEMPT_KILLED事件
 如果最终状态是FAILED,发送RMAppEventType.ATTEMPT_FAILED事件
c.如果最终状态是KILLED或者FAILED,要设置
          appAttempt.setTrackingUrlToRMAppPage();//设置app的网页url
          appAttempt.invalidateAMHostAndPort();//重置AM所在的host和rpc的port
d.发送事件SchedulerEventType.APP_ATTEMPT_REMOVED,从队列中删除该尝试任务的调度
e.appAttempt.removeCredentials(appAttempt); 删除token
f.appAttempt.rmContext.getRMApplicationHistoryWriter().applicationAttemptFinished(appAttempt, finalAttemptState);
  写日志文件
g.appAttempt.rmContext.getSystemMetricsPublisher() 处理token




resourceManager

